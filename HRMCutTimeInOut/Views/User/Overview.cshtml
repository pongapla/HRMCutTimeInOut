@model IEnumerable<HRMCutTimeInOut.Models.TimeCutData>;

@{
    ViewData["Title"] = "Overviwe Page";
}

<div class="mt-4">
    <h4 class="" >ข้อมูลเวลาเข้า-ออกของพนักงานที่ทำการแก้ไขแล้ว</h4>
    <hr />
        <div class="row">
        <div class="col-8">
        </div>
                    <div class="col-4 text-right">
                        @if (Model.Count() == 0)
                        {
                            <button class="btn btn-success btn-export-excel" disabled>
                                <i class="bi bi-filetype-xls"></i>
                                Export Excel
                            </button>
                            <button class="btn btn-info" disabled>
                                <i class="bi bi-filetype-xls"></i>
                                Export FileText
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-success btn-export-excel" onclick="genExcel()">
                                <i class="bi bi-filetype-xls"></i>
                                Export Excel
                            </button>

                            <button class="btn btn-info" onclick=" genText()">
                                <i class="bi bi-filetype-xls"></i>
                                Export FileText
                            </button>
                        }
                    </div>
        </div>  
        <div class="my-1">
            <table id="example" class="display" style="width:100%">
                <thead>
                    <tr>
                        <th class="text-center" style="width:150px;">DATE</th>
                        <th class="text-center" style="width:110px;">Time-In</th>
                        <th class="text-center" style="width:120px;">Time-Out</th>
                        <th class="text-center" style="width:30px;">CODE</th>
                        <th class="" style="width:100px;">NAME</th>
                        <th class="" style="width:160px;">DEPARTMENT</th>
                        <th cls="text-center">Groups</th>
                        <th cls="text-center">WorkShift</th>
                        <th class="text-center">TotalHour</th>
                        <th>Remark</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@item.dateData</td>
                        <td class="@(string.IsNullOrWhiteSpace(item.timeIn) ? "table-danger" : "")">@item.timeIn</td>
                            <td class="@(string.IsNullOrWhiteSpace(item.timeOut) ? "table-danger" : "")">@item.timeOut</td>
                            <td class="text-center">@item.code</td>
                            <td>@item.name</td>
                            <td>@item.department</td>
                            <td class="text-center">@item.shift</td>
                            <td class="text-center">@item.workShift</td>
                            <td class="text-center">@item.totalHour</td>
                            <td>@item.checkResult</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        @if (Model.Count() == 0)
        {
            <div class="alert alert-warning" role="alert">
                ไม่พบข้อมูลพนักงาน เข้าออก
            </div>
        }
    </div>
    <div>
        <span class="text-danger">* หมายเหตุ</span> <br /> Groups คือ พนักงานคนนั้นอยู่กลุ่มไหน มีทั้งหมด 4 กลุ่ม: A, B, C, D  <br />  Work Shift คือ พนักงานทำงานกะไหน มีทั้งหมด 2 ประเภท: เช้า (D), ดึก (N)
    </div>

<div class="text-center">
    <div class="spinner-grow d-none" role="status">
        <span class="visually-hidden"></span>
    </div>
</div>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<link href="https://cdn.datatables.net/v/dt/dt-2.0.7/datatables.min.css" rel="stylesheet">
<script src="https://cdn.datatables.net/v/dt/dt-2.0.7/datatables.min.js"></script>
<script>
    var js = jQuery.noConflict(true);
    js(document).ready(function () {
        js('#example').DataTable({

        });
    });

    async function genExcel() {
        var tableRows = document.querySelectorAll("tbody tr"); // เลือกทุกแถวในตาราง

        var modelData = [];

        tableRows.forEach(function (row) {
            var cells = row.querySelectorAll("td"); // เลือกเซลล์ทุกเซลล์ในแถว

            var rowData = {
                dateData: cells[0].innerText,
                timeIn: cells[1].innerText,
                timeOut: cells[2].innerText,
                code: cells[3].innerText,
                name: cells[4].innerText,
                department: cells[5].innerText,
                shift: cells[6].innerText
            };

            modelData.push(rowData); // เพิ่มข้อมูลแถวลงใน modelData
        });

        try {
            const response = await fetch("/User/ExportExcelOverview", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(modelData)
            });

            if (!response.ok) {
                throw new Error("Network response was not ok");
            }

            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            a.download = "dataOverview.xlsx";
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
        } catch (error) {
            console.error("There was a problem with your fetch operation:", error);
        }
    }

    async function genText() {
        var tableRows = document.querySelectorAll("tbody tr");

        var modelData = [];

        tableRows.forEach(function (row) {
            var cells = row.querySelectorAll("td");

            var rowData = {
                dateData: cells[0].innerText,
                timeIn: cells[1].innerText,
                timeOut: cells[2].innerText,
                code: cells[3].innerText,
                name: cells[4].innerText,
                department: cells[5].innerText,
                shift: cells[6].innerText
            };

            modelData.push(rowData); // เพิ่มข้อมูลแถวลงใน modelData
        });
       
        try {
            const response = await fetch("/User/ExportText", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(modelData)
            });

            if (!response.ok) {
                throw new Error("Network response was not ok");
            }

            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            a.download = "dataTimeCut.txt";
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
        } catch (error) {
            console.error("There was a problem with your fetch operation:", error);
        }
    }
    
</script>
<style>
    .btn {
        margin-top: 32px;
    }

    .spinner-grow {
        position: absolute;
        top: 400px;
        left: 600px;
        width: 50px;
        height: 50px;
    }

    .red-cell {
        color: red;
    }

    .body-container {
        /*remove the container default padding attribute*/
        padding-left: 20px !important;
        padding-right: 20px !important;
        /*increase width as per your need*/
        max-width: 100%;
    }
</style>